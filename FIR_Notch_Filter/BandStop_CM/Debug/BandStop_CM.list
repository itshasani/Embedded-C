
BandStop_CM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b20  08002b20  00003b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b38  08002b38  00004110  2**0
                  CONTENTS
  4 .ARM          00000008  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b40  08002b40  00004110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08002b48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b10  20000110  08002c58  00004110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013c20  08002c58  00004c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb1e  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bda  00000000  00000000  00010c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00012838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099f  00000000  00000000  00013478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cab  00000000  00000000  00013e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecd2  00000000  00000000  00035ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d102c  00000000  00000000  00044794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001157c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  00115804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00118b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b08 	.word	0x08002b08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	08002b08 	.word	0x08002b08

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb71 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f911 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9fb 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f9cf 	bl	80008a8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800050a:	f000 f97d 	bl	8000808 <MX_TIM5_Init>
	  {
		  aFIR_F32_Coeffs[k] =0;
	  }
  }
*/
  sampleOld = 0;
 800050e:	4b77      	ldr	r3, [pc, #476]	@ (80006ec <main+0x1f8>)
 8000510:	2200      	movs	r2, #0
 8000512:	801a      	strh	r2, [r3, #0]
  sampleIn = 0;
 8000514:	4b76      	ldr	r3, [pc, #472]	@ (80006f0 <main+0x1fc>)
 8000516:	2200      	movs	r2, #0
 8000518:	801a      	strh	r2, [r3, #0]
  sampleOut = 1;
 800051a:	4b76      	ldr	r3, [pc, #472]	@ (80006f4 <main+0x200>)
 800051c:	2201      	movs	r2, #1
 800051e:	801a      	strh	r2, [r3, #0]
  dataIn = 0;
 8000520:	4b75      	ldr	r3, [pc, #468]	@ (80006f8 <main+0x204>)
 8000522:	f04f 0200 	mov.w	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
  dataOut = 0;
 8000528:	4b74      	ldr	r3, [pc, #464]	@ (80006fc <main+0x208>)
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
  timeA = 0;
 8000530:	4b73      	ldr	r3, [pc, #460]	@ (8000700 <main+0x20c>)
 8000532:	f04f 0200 	mov.w	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
  trigData = 0;
 8000538:	4b72      	ldr	r3, [pc, #456]	@ (8000704 <main+0x210>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
  memset(dataInArray,0,sizeof(dataInArray));
 800053e:	f644 6298 	movw	r2, #20120	@ 0x4e98
 8000542:	2100      	movs	r1, #0
 8000544:	4870      	ldr	r0, [pc, #448]	@ (8000708 <main+0x214>)
 8000546:	f002 fab3 	bl	8002ab0 <memset>
  memset(dataOutArray,0,sizeof(dataOutArray));
 800054a:	f644 6298 	movw	r2, #20120	@ 0x4e98
 800054e:	2100      	movs	r1, #0
 8000550:	486e      	ldr	r0, [pc, #440]	@ (800070c <main+0x218>)
 8000552:	f002 faad 	bl	8002ab0 <memset>

  memset(usRefCnt,0,sizeof(usRefCnt));
 8000556:	f644 628c 	movw	r2, #20108	@ 0x4e8c
 800055a:	2100      	movs	r1, #0
 800055c:	486c      	ldr	r0, [pc, #432]	@ (8000710 <main+0x21c>)
 800055e:	f002 faa7 	bl	8002ab0 <memset>
  memset(usCnt,0,sizeof(usCnt));
 8000562:	f644 628c 	movw	r2, #20108	@ 0x4e8c
 8000566:	2100      	movs	r1, #0
 8000568:	486a      	ldr	r0, [pc, #424]	@ (8000714 <main+0x220>)
 800056a:	f002 faa1 	bl	8002ab0 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (state) {
 800056e:	4b6a      	ldr	r3, [pc, #424]	@ (8000718 <main+0x224>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d8fb      	bhi.n	800056e <main+0x7a>
 8000576:	a201      	add	r2, pc, #4	@ (adr r2, 800057c <main+0x88>)
 8000578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057c:	0800058d 	.word	0x0800058d
 8000580:	080005d9 	.word	0x080005d9
 8000584:	08000679 	.word	0x08000679
 8000588:	0800056f 	.word	0x0800056f
			// copy each sample to input array
	  case 0:
		  	  if(sampleIn != sampleOld)
 800058c:	4b58      	ldr	r3, [pc, #352]	@ (80006f0 <main+0x1fc>)
 800058e:	881a      	ldrh	r2, [r3, #0]
 8000590:	4b56      	ldr	r3, [pc, #344]	@ (80006ec <main+0x1f8>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d00e      	beq.n	80005b6 <main+0xc2>
		  	  {
		  		  dataInArray[sampleIn - 1] = dataIn;
 8000598:	4b55      	ldr	r3, [pc, #340]	@ (80006f0 <main+0x1fc>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	3b01      	subs	r3, #1
 800059e:	4a56      	ldr	r2, [pc, #344]	@ (80006f8 <main+0x204>)
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	4959      	ldr	r1, [pc, #356]	@ (8000708 <main+0x214>)
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	601a      	str	r2, [r3, #0]
		  		  sampleOld ++;
 80005aa:	4b50      	ldr	r3, [pc, #320]	@ (80006ec <main+0x1f8>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b4e      	ldr	r3, [pc, #312]	@ (80006ec <main+0x1f8>)
 80005b4:	801a      	strh	r2, [r3, #0]
		  	  }
		  	  if (sampleOld == 5026)
 80005b6:	4b4d      	ldr	r3, [pc, #308]	@ (80006ec <main+0x1f8>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	f241 32a2 	movw	r2, #5026	@ 0x13a2
 80005be:	4293      	cmp	r3, r2
 80005c0:	f040 808f 	bne.w	80006e2 <main+0x1ee>
		  	  {
		  		 sampleOld = 0;
 80005c4:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <main+0x1f8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
		  		 sampleOut = 1;
 80005ca:	4b4a      	ldr	r3, [pc, #296]	@ (80006f4 <main+0x200>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	801a      	strh	r2, [r3, #0]
		  		 state =1 ;
 80005d0:	4b51      	ldr	r3, [pc, #324]	@ (8000718 <main+0x224>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
		  	  }
			break;
 80005d6:	e084      	b.n	80006e2 <main+0x1ee>
	  case 1:
		  	  // copy data in array to data out array
		  int n;
		  int i;

		  for (n = 0;n < 5027;n++)
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	e043      	b.n	8000666 <main+0x172>
		  {
			  usRefCnt[n] = __HAL_TIM_GET_COUNTER(&htim5);
 80005de:	4b4f      	ldr	r3, [pc, #316]	@ (800071c <main+0x228>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005e4:	494a      	ldr	r1, [pc, #296]	@ (8000710 <main+0x21c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for (i=0 ; i < 65;i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	e025      	b.n	800063e <main+0x14a>
			  {
				  if((n-i) < 0)
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <main+0x152>
				  {
					  break;
				  }
				  else
				  {
				  dataOutArray[n] += filter_v4coeff_ASN[i]*dataInArray[n-i];
 80005fc:	4a43      	ldr	r2, [pc, #268]	@ (800070c <main+0x218>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	ed93 7a00 	vldr	s14, [r3]
 8000608:	4a45      	ldr	r2, [pc, #276]	@ (8000720 <main+0x22c>)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	edd3 6a00 	vldr	s13, [r3]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	4a3b      	ldr	r2, [pc, #236]	@ (8000708 <main+0x214>)
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	edd3 7a00 	vldr	s15, [r3]
 8000624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062c:	4a37      	ldr	r2, [pc, #220]	@ (800070c <main+0x218>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	edc3 7a00 	vstr	s15, [r3]
			  for (i=0 ; i < 65;i++)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b40      	cmp	r3, #64	@ 0x40
 8000642:	ddd6      	ble.n	80005f2 <main+0xfe>
 8000644:	e000      	b.n	8000648 <main+0x154>
					  break;
 8000646:	bf00      	nop
				  }
			  }
			  usCnt[n] =  __HAL_TIM_GET_COUNTER(&htim5) - usRefCnt[n];
 8000648:	4b34      	ldr	r3, [pc, #208]	@ (800071c <main+0x228>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800064e:	4930      	ldr	r1, [pc, #192]	@ (8000710 <main+0x21c>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000656:	1ad2      	subs	r2, r2, r3
 8000658:	492e      	ldr	r1, [pc, #184]	@ (8000714 <main+0x220>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (n = 0;n < 5027;n++)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f241 32a2 	movw	r2, #5026	@ 0x13a2
 800066c:	4293      	cmp	r3, r2
 800066e:	ddb6      	ble.n	80005de <main+0xea>
		  }

		  state = 2;
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <main+0x224>)
 8000672:	2202      	movs	r2, #2
 8000674:	701a      	strb	r2, [r3, #0]
		  break;
 8000676:	e038      	b.n	80006ea <main+0x1f6>
	  case 2:
		  	  // with some proper sampling time copy each output array to data out variable
		  dataOut = dataOutArray[sampleOut - 1];
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <main+0x200>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a23      	ldr	r2, [pc, #140]	@ (800070c <main+0x218>)
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <main+0x208>)
 8000688:	6013      	str	r3, [r2, #0]
		  HAL_Delay(25);
 800068a:	2019      	movs	r0, #25
 800068c:	f000 fb1a 	bl	8000cc4 <HAL_Delay>
		  trigData = 1;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <main+0x210>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(25);
 8000696:	2019      	movs	r0, #25
 8000698:	f000 fb14 	bl	8000cc4 <HAL_Delay>
		  trigData = 0;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <main+0x210>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		  timeA = usCnt[sampleOut -1];
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <main+0x200>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <main+0x220>)
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <main+0x20c>)
 80006b8:	edc3 7a00 	vstr	s15, [r3]
		  sampleOut ++;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <main+0x200>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <main+0x200>)
 80006c6:	801a      	strh	r2, [r3, #0]
		  if(sampleOut == 5026)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <main+0x200>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	f241 32a2 	movw	r2, #5026	@ 0x13a2
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d108      	bne.n	80006e6 <main+0x1f2>
		  {
			  sampleOut = 1;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <main+0x200>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	801a      	strh	r2, [r3, #0]
			  state = 3;
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <main+0x224>)
 80006dc:	2203      	movs	r2, #3
 80006de:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80006e0:	e001      	b.n	80006e6 <main+0x1f2>
			break;
 80006e2:	bf00      	nop
 80006e4:	e743      	b.n	800056e <main+0x7a>
		  break;
 80006e6:	bf00      	nop
 80006e8:	e741      	b.n	800056e <main+0x7a>
	  switch (state) {
 80006ea:	e740      	b.n	800056e <main+0x7a>
 80006ec:	200001c0 	.word	0x200001c0
 80006f0:	200001bc 	.word	0x200001bc
 80006f4:	200001be 	.word	0x200001be
 80006f8:	200001c4 	.word	0x200001c4
 80006fc:	200001cc 	.word	0x200001cc
 8000700:	20013c18 	.word	0x20013c18
 8000704:	200001c9 	.word	0x200001c9
 8000708:	200001d0 	.word	0x200001d0
 800070c:	20005068 	.word	0x20005068
 8000710:	20009f00 	.word	0x20009f00
 8000714:	2000ed8c 	.word	0x2000ed8c
 8000718:	200001c8 	.word	0x200001c8
 800071c:	2000012c 	.word	0x2000012c
 8000720:	20000000 	.word	0x20000000

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	@ 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f9bc 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <SystemClock_Config+0xdc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemClock_Config+0xdc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemClock_Config+0xdc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <SystemClock_Config+0xe0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <SystemClock_Config+0xe0>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <SystemClock_Config+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000798:	23b4      	movs	r3, #180	@ 0xb4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079c:	2304      	movs	r3, #4
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f8db 	bl	8001968 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 f90e 	bl	80009d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007bc:	f000 fd3a 	bl	8001234 <HAL_PWREx_EnableOverDrive>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007c6:	f000 f907 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2105      	movs	r1, #5
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fd73 	bl	80012d4 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007f4:	f000 f8f0 	bl	80009d8 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <MX_TIM5_Init+0x9c>)
 8000828:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 89;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_TIM5_Init+0x98>)
 800082c:	2259      	movs	r2, #89	@ 0x59
 800082e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800084a:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <MX_TIM5_Init+0x98>)
 800084c:	f001 fb2a 	bl	8001ea4 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f8bf 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4619      	mov	r1, r3
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000868:	f001 fbd4 	bl	8002014 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 f8b1 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000884:	f001 fdd4 	bl	8002430 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800088e:	f000 f8a3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM5_Init+0x98>)
 8000894:	f001 fb56 	bl	8001f44 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000012c 	.word	0x2000012c
 80008a4:	40000c00 	.word	0x40000c00

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_USART2_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f001 fe22 	bl	8002528 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f875 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000174 	.word	0x20000174
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2c      	ldr	r2, [pc, #176]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 8000988:	f000 fc3a 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_GPIO_Init+0xd8>)
 80009a4:	f000 fa98 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a8:	2320      	movs	r3, #32
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 80009c0:	f000 fa8a 	bl	8000ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fa24 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <HAL_TIM_Base_MspInit+0x3c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10d      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40000c00 	.word	0x40000c00
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <HAL_UART_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_UART_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <HAL_UART_MspInit+0x8c>)
 8000aee:	f000 f9f3 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	@ 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f891 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f001 ff81 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fc99 	bl	80004f4 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000bd0:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8000bd4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000bd8:	20013c20 	.word	0x20013c20

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f931 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fee6 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f93b 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f911 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000104 	.word	0x20000104
 8000c7c:	2000010c 	.word	0x2000010c
 8000c80:	20000108 	.word	0x20000108

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2000010c 	.word	0x2000010c
 8000ca8:	20013c1c 	.word	0x20013c1c

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20013c1c 	.word	0x20013c1c

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000010c 	.word	0x2000010c

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff47 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5c 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb0 	bl	8000e2c <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e165      	b.n	80011c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8154 	bne.w	80011ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80ae 	beq.w	80011ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b5d      	ldr	r3, [pc, #372]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a5c      	ldr	r2, [pc, #368]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b5a      	ldr	r3, [pc, #360]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	@ (80011e0 <HAL_GPIO_Init+0x308>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	@ (80011e4 <HAL_GPIO_Init+0x30c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x216>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	@ (80011e8 <HAL_GPIO_Init+0x310>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x212>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	@ (80011ec <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x20e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	@ (80011f0 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x20a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4a      	ldr	r2, [pc, #296]	@ (80011f4 <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x206>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x202>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <HAL_GPIO_Init+0x324>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a31      	ldr	r2, [pc, #196]	@ (80011fc <HAL_GPIO_Init+0x324>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_GPIO_Init+0x324>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a26      	ldr	r2, [pc, #152]	@ (80011fc <HAL_GPIO_Init+0x324>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_GPIO_Init+0x324>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <HAL_GPIO_Init+0x324>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_GPIO_Init+0x324>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <HAL_GPIO_Init+0x324>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae96 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff fd24 	bl	8000cac <HAL_GetTick>
 8001264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001266:	e009      	b.n	800127c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001268:	f7ff fd20 	bl	8000cac <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001276:	d901      	bls.n	800127c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e01f      	b.n	80012bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_PWREx_EnableOverDrive+0x98>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d1ee      	bne.n	8001268 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff fd0c 	bl	8000cac <HAL_GetTick>
 8001294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001296:	e009      	b.n	80012ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001298:	f7ff fd08 	bl	8000cac <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a6:	d901      	bls.n	80012ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e007      	b.n	80012bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_PWREx_EnableOverDrive+0x98>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012b8:	d1ee      	bne.n	8001298 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	420e0040 	.word	0x420e0040
 80012cc:	40007000 	.word	0x40007000
 80012d0:	420e0044 	.word	0x420e0044

080012d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0cc      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e8:	4b68      	ldr	r3, [pc, #416]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d90c      	bls.n	8001310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b65      	ldr	r3, [pc, #404]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b63      	ldr	r3, [pc, #396]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0b8      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001328:	4b59      	ldr	r3, [pc, #356]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a58      	ldr	r2, [pc, #352]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800134a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b50      	ldr	r3, [pc, #320]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	494d      	ldr	r1, [pc, #308]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	4313      	orrs	r3, r2
 800135c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d044      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d119      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e07f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d003      	beq.n	8001392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e06f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e067      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f023 0203 	bic.w	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4934      	ldr	r1, [pc, #208]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fc72 	bl	8000cac <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013cc:	f7ff fc6e 	bl	8000cac <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e04f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 020c 	and.w	r2, r3, #12
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1eb      	bne.n	80013cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d20c      	bcs.n	800141c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e032      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4916      	ldr	r1, [pc, #88]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	490e      	ldr	r1, [pc, #56]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145a:	f000 f855 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 800145e:	4602      	mov	r2, r0
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	490a      	ldr	r1, [pc, #40]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	5ccb      	ldrb	r3, [r1, r3]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fbd2 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00
 8001490:	40023800 	.word	0x40023800
 8001494:	08002b20 	.word	0x08002b20
 8001498:	20000104 	.word	0x20000104
 800149c:	20000108 	.word	0x20000108

080014a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000104 	.word	0x20000104

080014b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014bc:	f7ff fff0 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	0a9b      	lsrs	r3, r3, #10
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4903      	ldr	r1, [pc, #12]	@ (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	08002b30 	.word	0x08002b30

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014e4:	f7ff ffdc 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	0b5b      	lsrs	r3, r3, #13
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	@ (8001504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	08002b30 	.word	0x08002b30

08001508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800150c:	b0ae      	sub	sp, #184	@ 0xb8
 800150e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152e:	4bcb      	ldr	r3, [pc, #812]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b0c      	cmp	r3, #12
 8001538:	f200 8206 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x440>
 800153c:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001579 	.word	0x08001579
 8001548:	08001949 	.word	0x08001949
 800154c:	08001949 	.word	0x08001949
 8001550:	08001949 	.word	0x08001949
 8001554:	08001581 	.word	0x08001581
 8001558:	08001949 	.word	0x08001949
 800155c:	08001949 	.word	0x08001949
 8001560:	08001949 	.word	0x08001949
 8001564:	08001589 	.word	0x08001589
 8001568:	08001949 	.word	0x08001949
 800156c:	08001949 	.word	0x08001949
 8001570:	08001949 	.word	0x08001949
 8001574:	08001779 	.word	0x08001779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4bb9      	ldr	r3, [pc, #740]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x358>)
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800157e:	e1e7      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4bb8      	ldr	r3, [pc, #736]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001586:	e1e3      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001588:	4bb4      	ldr	r3, [pc, #720]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	4bb1      	ldr	r3, [pc, #708]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d071      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4bae      	ldr	r3, [pc, #696]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015c6:	4622      	mov	r2, r4
 80015c8:	462b      	mov	r3, r5
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0159      	lsls	r1, r3, #5
 80015d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4621      	mov	r1, r4
 80015e0:	1a51      	subs	r1, r2, r1
 80015e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80015e4:	4629      	mov	r1, r5
 80015e6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015f8:	4649      	mov	r1, r9
 80015fa:	018b      	lsls	r3, r1, #6
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001602:	4641      	mov	r1, r8
 8001604:	018a      	lsls	r2, r1, #6
 8001606:	4641      	mov	r1, r8
 8001608:	1a51      	subs	r1, r2, r1
 800160a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	eb63 0301 	sbc.w	r3, r3, r1
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001620:	4649      	mov	r1, r9
 8001622:	00cb      	lsls	r3, r1, #3
 8001624:	4641      	mov	r1, r8
 8001626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800162a:	4641      	mov	r1, r8
 800162c:	00ca      	lsls	r2, r1, #3
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	4603      	mov	r3, r0
 8001634:	4622      	mov	r2, r4
 8001636:	189b      	adds	r3, r3, r2
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
 800163a:	462b      	mov	r3, r5
 800163c:	460a      	mov	r2, r1
 800163e:	eb42 0303 	adc.w	r3, r2, r3
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001650:	4629      	mov	r1, r5
 8001652:	024b      	lsls	r3, r1, #9
 8001654:	4621      	mov	r1, r4
 8001656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165a:	4621      	mov	r1, r4
 800165c:	024a      	lsls	r2, r1, #9
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800166c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001674:	f7fe fdc6 	bl	8000204 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001682:	e067      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001684:	4b75      	ldr	r3, [pc, #468]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	2200      	movs	r2, #0
 800168c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800169e:	2300      	movs	r3, #0
 80016a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016a6:	4622      	mov	r2, r4
 80016a8:	462b      	mov	r3, r5
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0159      	lsls	r1, r3, #5
 80016b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b8:	0150      	lsls	r0, r2, #5
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4621      	mov	r1, r4
 80016c0:	1a51      	subs	r1, r2, r1
 80016c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016c4:	4629      	mov	r1, r5
 80016c6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001706:	4692      	mov	sl, r2
 8001708:	469b      	mov	fp, r3
 800170a:	4623      	mov	r3, r4
 800170c:	eb1a 0303 	adds.w	r3, sl, r3
 8001710:	623b      	str	r3, [r7, #32]
 8001712:	462b      	mov	r3, r5
 8001714:	eb4b 0303 	adc.w	r3, fp, r3
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001726:	4629      	mov	r1, r5
 8001728:	028b      	lsls	r3, r1, #10
 800172a:	4621      	mov	r1, r4
 800172c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001730:	4621      	mov	r1, r4
 8001732:	028a      	lsls	r2, r1, #10
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800173c:	2200      	movs	r2, #0
 800173e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001740:	677a      	str	r2, [r7, #116]	@ 0x74
 8001742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001746:	f7fe fd5d 	bl	8000204 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001754:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	3301      	adds	r3, #1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001776:	e0eb      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d06b      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800179a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800179c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a4:	2300      	movs	r3, #0
 80017a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	0159      	lsls	r1, r3, #5
 80017ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017be:	0150      	lsls	r0, r2, #5
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4621      	mov	r1, r4
 80017c6:	1a51      	subs	r1, r2, r1
 80017c8:	61b9      	str	r1, [r7, #24]
 80017ca:	4629      	mov	r1, r5
 80017cc:	eb63 0301 	sbc.w	r3, r3, r1
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017de:	4659      	mov	r1, fp
 80017e0:	018b      	lsls	r3, r1, #6
 80017e2:	4651      	mov	r1, sl
 80017e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e8:	4651      	mov	r1, sl
 80017ea:	018a      	lsls	r2, r1, #6
 80017ec:	4651      	mov	r1, sl
 80017ee:	ebb2 0801 	subs.w	r8, r2, r1
 80017f2:	4659      	mov	r1, fp
 80017f4:	eb63 0901 	sbc.w	r9, r3, r1
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180c:	4690      	mov	r8, r2
 800180e:	4699      	mov	r9, r3
 8001810:	4623      	mov	r3, r4
 8001812:	eb18 0303 	adds.w	r3, r8, r3
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	462b      	mov	r3, r5
 800181a:	eb49 0303 	adc.w	r3, r9, r3
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800182c:	4629      	mov	r1, r5
 800182e:	024b      	lsls	r3, r1, #9
 8001830:	4621      	mov	r1, r4
 8001832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001836:	4621      	mov	r1, r4
 8001838:	024a      	lsls	r2, r1, #9
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001842:	2200      	movs	r2, #0
 8001844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001846:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800184c:	f7fe fcda 	bl	8000204 <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800185a:	e065      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x420>
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	4611      	mov	r1, r2
 8001874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001878:	653b      	str	r3, [r7, #80]	@ 0x50
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	@ 0x54
 800187e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001882:	4642      	mov	r2, r8
 8001884:	464b      	mov	r3, r9
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4641      	mov	r1, r8
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	4649      	mov	r1, r9
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b4:	4659      	mov	r1, fp
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4651      	mov	r1, sl
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4651      	mov	r1, sl
 80018c4:	1a54      	subs	r4, r2, r1
 80018c6:	4659      	mov	r1, fp
 80018c8:	eb63 0501 	sbc.w	r5, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	00eb      	lsls	r3, r5, #3
 80018d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018da:	00e2      	lsls	r2, r4, #3
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	18e3      	adds	r3, r4, r3
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	464b      	mov	r3, r9
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001910:	2200      	movs	r2, #0
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001914:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800191a:	f7fe fc73 	bl	8000204 <__aeabi_uldivmod>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4613      	mov	r3, r2
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0f1b      	lsrs	r3, r3, #28
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800193a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001946:	e003      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001954:	4618      	mov	r0, r3
 8001956:	37b8      	adds	r7, #184	@ 0xb8
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400

08001968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e28d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8083 	beq.w	8001a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001988:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d019      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001994:	4b91      	ldr	r3, [pc, #580]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800199c:	2b08      	cmp	r3, #8
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a0:	4b8e      	ldr	r3, [pc, #568]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d112      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b84      	ldr	r3, [pc, #528]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x124>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d157      	bne.n	8001a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e25a      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x90>
 80019ea:	4b7c      	ldr	r3, [pc, #496]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7b      	ldr	r2, [pc, #492]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb4>
 8001a02:	4b76      	ldr	r3, [pc, #472]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a75      	ldr	r2, [pc, #468]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a72      	ldr	r2, [pc, #456]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f936 	bl	8000cac <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f932 	bl	8000cac <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e21f      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b61      	ldr	r3, [pc, #388]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xdc>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f922 	bl	8000cac <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f91e 	bl	8000cac <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e20b      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x104>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06f      	beq.n	8001b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9a:	4b50      	ldr	r3, [pc, #320]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b44      	ldr	r3, [pc, #272]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1d3      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3b      	ldr	r3, [pc, #236]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4937      	ldr	r1, [pc, #220]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f8cb 	bl	8000cac <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f8c7 	bl	8000cac <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1b4      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4925      	ldr	r1, [pc, #148]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8aa 	bl	8000cac <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f8a6 	bl	8000cac <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e193      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d036      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d016      	beq.n	8001bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff f88a 	bl	8000cac <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f886 	bl	8000cac <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e173      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x234>
 8001bba:	e01b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f873 	bl	8000cac <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	e00e      	b.n	8001be8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f86f 	bl	8000cac <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d907      	bls.n	8001be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e15c      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	42470000 	.word	0x42470000
 8001be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ea      	bne.n	8001bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8097 	beq.w	8001d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b7f      	ldr	r3, [pc, #508]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b79      	ldr	r3, [pc, #484]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f82f 	bl	8000cac <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff f82b 	bl	8000cac <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e118      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x31e>
 8001c78:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a65      	ldr	r2, [pc, #404]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x340>
 8001c8e:	4b61      	ldr	r3, [pc, #388]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a60      	ldr	r2, [pc, #384]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a59      	ldr	r2, [pc, #356]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb4:	4b57      	ldr	r3, [pc, #348]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a56      	ldr	r2, [pc, #344]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fff0 	bl	8000cac <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ffec 	bl	8000cac <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0d7      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0ee      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x368>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7fe ffda 	bl	8000cac <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe ffd6 	bl	8000cac <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0c1      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a3a      	ldr	r2, [pc, #232]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80ad 	beq.w	8001e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3a:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d060      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d145      	bne.n	8001dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ffaa 	bl	8000cac <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe ffa6 	bl	8000cac <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e093      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	071b      	lsls	r3, r3, #28
 8001da6:	491b      	ldr	r1, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7fe ff7b 	bl	8000cac <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ff77 	bl	8000cac <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e064      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x452>
 8001dd8:	e05c      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff64 	bl	8000cac <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ff60 	bl	8000cac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x480>
 8001e06:	e045      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e040      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_RCC_OscConfig+0x538>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d030      	beq.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d129      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d122      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fdb2 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 f95e 	bl	80021a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e046      	b.n	8001fea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <HAL_TIM_Base_Start+0xb4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f76:	d01d      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_TIM_Base_Start+0xb8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_TIM_Base_Start+0xbc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_TIM_Base_Start+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_TIM_Base_Start+0xc4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_TIM_Base_Start+0xc8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_Base_Start+0x70>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_TIM_Base_Start+0xcc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40010400 	.word	0x40010400
 800200c:	40014000 	.word	0x40014000
 8002010:	40001800 	.word	0x40001800

08002014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_TIM_ConfigClockSource+0x1c>
 800202c:	2302      	movs	r3, #2
 800202e:	e0b4      	b.n	800219a <HAL_TIM_ConfigClockSource+0x186>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800204e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002068:	d03e      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0xd4>
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800206e:	f200 8087 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002076:	f000 8086 	beq.w	8002186 <HAL_TIM_ConfigClockSource+0x172>
 800207a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800207e:	d87f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002080:	2b70      	cmp	r3, #112	@ 0x70
 8002082:	d01a      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0xa6>
 8002084:	2b70      	cmp	r3, #112	@ 0x70
 8002086:	d87b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002088:	2b60      	cmp	r3, #96	@ 0x60
 800208a:	d050      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x11a>
 800208c:	2b60      	cmp	r3, #96	@ 0x60
 800208e:	d877      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002090:	2b50      	cmp	r3, #80	@ 0x50
 8002092:	d03c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0xfa>
 8002094:	2b50      	cmp	r3, #80	@ 0x50
 8002096:	d873      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 8002098:	2b40      	cmp	r3, #64	@ 0x40
 800209a:	d058      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x13a>
 800209c:	2b40      	cmp	r3, #64	@ 0x40
 800209e:	d86f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020a0:	2b30      	cmp	r3, #48	@ 0x30
 80020a2:	d064      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020a4:	2b30      	cmp	r3, #48	@ 0x30
 80020a6:	d86b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d060      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d867      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05c      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d05a      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x15a>
 80020b8:	e062      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	f000 f991 	bl	80023f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
      break;
 80020e6:	e04f      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020f8:	f000 f97a 	bl	80023f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800210a:	609a      	str	r2, [r3, #8]
      break;
 800210c:	e03c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	461a      	mov	r2, r3
 800211c:	f000 f8ee 	bl	80022fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2150      	movs	r1, #80	@ 0x50
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f947 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 800212c:	e02c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800213a:	461a      	mov	r2, r3
 800213c:	f000 f90d 	bl	800235a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2160      	movs	r1, #96	@ 0x60
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f937 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 800214c:	e01c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800215a:	461a      	mov	r2, r3
 800215c:	f000 f8ce 	bl	80022fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2140      	movs	r1, #64	@ 0x40
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f927 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 800216c:	e00c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f000 f91e 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 800217e:	e003      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      break;
 8002184:	e000      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a46      	ldr	r2, [pc, #280]	@ (80022d0 <TIM_Base_SetConfig+0x12c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c2:	d00f      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a43      	ldr	r2, [pc, #268]	@ (80022d4 <TIM_Base_SetConfig+0x130>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a42      	ldr	r2, [pc, #264]	@ (80022d8 <TIM_Base_SetConfig+0x134>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a41      	ldr	r2, [pc, #260]	@ (80022dc <TIM_Base_SetConfig+0x138>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a40      	ldr	r2, [pc, #256]	@ (80022e0 <TIM_Base_SetConfig+0x13c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a35      	ldr	r2, [pc, #212]	@ (80022d0 <TIM_Base_SetConfig+0x12c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002204:	d027      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a32      	ldr	r2, [pc, #200]	@ (80022d4 <TIM_Base_SetConfig+0x130>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d023      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <TIM_Base_SetConfig+0x134>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a30      	ldr	r2, [pc, #192]	@ (80022dc <TIM_Base_SetConfig+0x138>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2f      	ldr	r2, [pc, #188]	@ (80022e0 <TIM_Base_SetConfig+0x13c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d017      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2e      	ldr	r2, [pc, #184]	@ (80022e4 <TIM_Base_SetConfig+0x140>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2d      	ldr	r2, [pc, #180]	@ (80022e8 <TIM_Base_SetConfig+0x144>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <TIM_Base_SetConfig+0x148>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <TIM_Base_SetConfig+0x14c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2a      	ldr	r2, [pc, #168]	@ (80022f4 <TIM_Base_SetConfig+0x150>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a29      	ldr	r2, [pc, #164]	@ (80022f8 <TIM_Base_SetConfig+0x154>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800225c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a10      	ldr	r2, [pc, #64]	@ (80022d0 <TIM_Base_SetConfig+0x12c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0xf8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <TIM_Base_SetConfig+0x13c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d103      	bne.n	80022a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f023 0201 	bic.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]
  }
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40014000 	.word	0x40014000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800
 80022f0:	40001800 	.word	0x40001800
 80022f4:	40001c00 	.word	0x40001c00
 80022f8:	40002000 	.word	0x40002000

080022fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f023 0201 	bic.w	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 030a 	bic.w	r3, r3, #10
 8002338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	621a      	str	r2, [r3, #32]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800235a:	b480      	push	{r7}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 0210 	bic.w	r2, r3, #16
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002396:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f043 0307 	orr.w	r3, r3, #7
 80023dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800240a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	021a      	lsls	r2, r3, #8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	431a      	orrs	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002444:	2302      	movs	r3, #2
 8002446:	e05a      	b.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a21      	ldr	r2, [pc, #132]	@ (800250c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002494:	d01d      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a18      	ldr	r2, [pc, #96]	@ (800251c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10c      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40010400 	.word	0x40010400
 8002520:	40014000 	.word	0x40014000
 8002524:	40001800 	.word	0x40001800

08002528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e042      	b.n	80025c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fa92 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	@ 0x24
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800256a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f82b 	bl	80025c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b0c0      	sub	sp, #256	@ 0x100
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	ea40 0301 	orr.w	r3, r0, r1
 80025f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	431a      	orrs	r2, r3
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002620:	f021 010c 	bic.w	r1, r1, #12
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800262e:	430b      	orrs	r3, r1
 8002630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002642:	6999      	ldr	r1, [r3, #24]
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	ea40 0301 	orr.w	r3, r0, r1
 800264e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b8f      	ldr	r3, [pc, #572]	@ (8002894 <UART_SetConfig+0x2cc>)
 8002658:	429a      	cmp	r2, r3
 800265a:	d005      	beq.n	8002668 <UART_SetConfig+0xa0>
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b8d      	ldr	r3, [pc, #564]	@ (8002898 <UART_SetConfig+0x2d0>)
 8002664:	429a      	cmp	r2, r3
 8002666:	d104      	bne.n	8002672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7fe ff3a 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 800266c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002670:	e003      	b.n	800267a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002672:	f7fe ff21 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8002676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002684:	f040 810c 	bne.w	80028a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800268c:	2200      	movs	r2, #0
 800268e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800269a:	4622      	mov	r2, r4
 800269c:	462b      	mov	r3, r5
 800269e:	1891      	adds	r1, r2, r2
 80026a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026a2:	415b      	adcs	r3, r3
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026aa:	4621      	mov	r1, r4
 80026ac:	eb12 0801 	adds.w	r8, r2, r1
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb43 0901 	adc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026d8:	462b      	mov	r3, r5
 80026da:	eb49 0303 	adc.w	r3, r9, r3
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026f6:	460b      	mov	r3, r1
 80026f8:	18db      	adds	r3, r3, r3
 80026fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80026fc:	4613      	mov	r3, r2
 80026fe:	eb42 0303 	adc.w	r3, r2, r3
 8002702:	657b      	str	r3, [r7, #84]	@ 0x54
 8002704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800270c:	f7fd fd7a 	bl	8000204 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <UART_SetConfig+0x2d4>)
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	011c      	lsls	r4, r3, #4
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800272c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002738:	415b      	adcs	r3, r3
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800273c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002740:	4641      	mov	r1, r8
 8002742:	eb12 0a01 	adds.w	sl, r2, r1
 8002746:	4649      	mov	r1, r9
 8002748:	eb43 0b01 	adc.w	fp, r3, r1
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800275c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002760:	4692      	mov	sl, r2
 8002762:	469b      	mov	fp, r3
 8002764:	4643      	mov	r3, r8
 8002766:	eb1a 0303 	adds.w	r3, sl, r3
 800276a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800276e:	464b      	mov	r3, r9
 8002770:	eb4b 0303 	adc.w	r3, fp, r3
 8002774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800278c:	460b      	mov	r3, r1
 800278e:	18db      	adds	r3, r3, r3
 8002790:	643b      	str	r3, [r7, #64]	@ 0x40
 8002792:	4613      	mov	r3, r2
 8002794:	eb42 0303 	adc.w	r3, r2, r3
 8002798:	647b      	str	r3, [r7, #68]	@ 0x44
 800279a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800279e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027a2:	f7fd fd2f 	bl	8000204 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <UART_SetConfig+0x2d4>)
 80027ae:	fba3 2301 	umull	r2, r3, r3, r1
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2264      	movs	r2, #100	@ 0x64
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	1acb      	subs	r3, r1, r3
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027c2:	4b36      	ldr	r3, [pc, #216]	@ (800289c <UART_SetConfig+0x2d4>)
 80027c4:	fba3 2302 	umull	r2, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027d0:	441c      	add	r4, r3
 80027d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	1891      	adds	r1, r2, r2
 80027ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027ec:	415b      	adcs	r3, r3
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027f4:	4641      	mov	r1, r8
 80027f6:	1851      	adds	r1, r2, r1
 80027f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80027fa:	4649      	mov	r1, r9
 80027fc:	414b      	adcs	r3, r1
 80027fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800280c:	4659      	mov	r1, fp
 800280e:	00cb      	lsls	r3, r1, #3
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002816:	4651      	mov	r1, sl
 8002818:	00ca      	lsls	r2, r1, #3
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	4603      	mov	r3, r0
 8002820:	4642      	mov	r2, r8
 8002822:	189b      	adds	r3, r3, r2
 8002824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002828:	464b      	mov	r3, r9
 800282a:	460a      	mov	r2, r1
 800282c:	eb42 0303 	adc.w	r3, r2, r3
 8002830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002848:	460b      	mov	r3, r1
 800284a:	18db      	adds	r3, r3, r3
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800284e:	4613      	mov	r3, r2
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800285a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800285e:	f7fd fcd1 	bl	8000204 <__aeabi_uldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <UART_SetConfig+0x2d4>)
 8002868:	fba3 1302 	umull	r1, r3, r3, r2
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	2164      	movs	r1, #100	@ 0x64
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	3332      	adds	r3, #50	@ 0x32
 800287a:	4a08      	ldr	r2, [pc, #32]	@ (800289c <UART_SetConfig+0x2d4>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4422      	add	r2, r4
 800288e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002890:	e106      	b.n	8002aa0 <UART_SetConfig+0x4d8>
 8002892:	bf00      	nop
 8002894:	40011000 	.word	0x40011000
 8002898:	40011400 	.word	0x40011400
 800289c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028b2:	4642      	mov	r2, r8
 80028b4:	464b      	mov	r3, r9
 80028b6:	1891      	adds	r1, r2, r2
 80028b8:	6239      	str	r1, [r7, #32]
 80028ba:	415b      	adcs	r3, r3
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028c2:	4641      	mov	r1, r8
 80028c4:	1854      	adds	r4, r2, r1
 80028c6:	4649      	mov	r1, r9
 80028c8:	eb43 0501 	adc.w	r5, r3, r1
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	00eb      	lsls	r3, r5, #3
 80028d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028da:	00e2      	lsls	r2, r4, #3
 80028dc:	4614      	mov	r4, r2
 80028de:	461d      	mov	r5, r3
 80028e0:	4643      	mov	r3, r8
 80028e2:	18e3      	adds	r3, r4, r3
 80028e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028e8:	464b      	mov	r3, r9
 80028ea:	eb45 0303 	adc.w	r3, r5, r3
 80028ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800290e:	4629      	mov	r1, r5
 8002910:	008b      	lsls	r3, r1, #2
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002918:	4621      	mov	r1, r4
 800291a:	008a      	lsls	r2, r1, #2
 800291c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002920:	f7fd fc70 	bl	8000204 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4b60      	ldr	r3, [pc, #384]	@ (8002aac <UART_SetConfig+0x4e4>)
 800292a:	fba3 2302 	umull	r2, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	011c      	lsls	r4, r3, #4
 8002932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800293c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	61b9      	str	r1, [r7, #24]
 800294c:	415b      	adcs	r3, r3
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6139      	str	r1, [r7, #16]
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002988:	464b      	mov	r3, r9
 800298a:	460a      	mov	r2, r1
 800298c:	eb42 0303 	adc.w	r3, r2, r3
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800299e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029ac:	4649      	mov	r1, r9
 80029ae:	008b      	lsls	r3, r1, #2
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b6:	4641      	mov	r1, r8
 80029b8:	008a      	lsls	r2, r1, #2
 80029ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029be:	f7fd fc21 	bl	8000204 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <UART_SetConfig+0x4e4>)
 80029ca:	fba3 2301 	umull	r2, r3, r3, r1
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2264      	movs	r2, #100	@ 0x64
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	1acb      	subs	r3, r1, r3
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	3332      	adds	r3, #50	@ 0x32
 80029dc:	4a33      	ldr	r2, [pc, #204]	@ (8002aac <UART_SetConfig+0x4e4>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e8:	441c      	add	r4, r3
 80029ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ee:	2200      	movs	r2, #0
 80029f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	1891      	adds	r1, r2, r2
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	415b      	adcs	r3, r3
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a08:	4641      	mov	r1, r8
 8002a0a:	1851      	adds	r1, r2, r1
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	4649      	mov	r1, r9
 8002a10:	414b      	adcs	r3, r1
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a20:	4659      	mov	r1, fp
 8002a22:	00cb      	lsls	r3, r1, #3
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	00ca      	lsls	r2, r1, #3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	4642      	mov	r2, r8
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	eb42 0303 	adc.w	r3, r2, r3
 8002a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	008b      	lsls	r3, r1, #2
 8002a60:	4641      	mov	r1, r8
 8002a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a66:	4641      	mov	r1, r8
 8002a68:	008a      	lsls	r2, r1, #2
 8002a6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a6e:	f7fd fbc9 	bl	8000204 <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <UART_SetConfig+0x4e4>)
 8002a78:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	2164      	movs	r1, #100	@ 0x64
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	3332      	adds	r3, #50	@ 0x32
 8002a8a:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <UART_SetConfig+0x4e4>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	f003 020f 	and.w	r2, r3, #15
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4422      	add	r2, r4
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aac:	51eb851f 	.word	0x51eb851f

08002ab0 <memset>:
 8002ab0:	4402      	add	r2, r0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8002af8 <__libc_init_array+0x38>)
 8002ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8002afc <__libc_init_array+0x3c>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	2600      	movs	r6, #0
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8002b00 <__libc_init_array+0x40>)
 8002ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8002b04 <__libc_init_array+0x44>)
 8002ad4:	f000 f818 	bl	8002b08 <_init>
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	2600      	movs	r6, #0
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002b40 	.word	0x08002b40
 8002afc:	08002b40 	.word	0x08002b40
 8002b00:	08002b40 	.word	0x08002b40
 8002b04:	08002b44 	.word	0x08002b44

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
